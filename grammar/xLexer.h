/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : ./grammar/x.g
 *     -                            On : 2021-01-26 00:17:41
 *     -                 for the lexer : xLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
xLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pxLexer, which is returned from a call to xLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pxLexer are  as follows:
 *
 *  - 
 void
      pxLexer->T__64(pxLexer)
 *  - 
 void
      pxLexer->T__65(pxLexer)
 *  - 
 void
      pxLexer->T__66(pxLexer)
 *  - 
 void
      pxLexer->T__67(pxLexer)
 *  - 
 void
      pxLexer->T__68(pxLexer)
 *  - 
 void
      pxLexer->T__69(pxLexer)
 *  - 
 void
      pxLexer->T__70(pxLexer)
 *  - 
 void
      pxLexer->T__71(pxLexer)
 *  - 
 void
      pxLexer->DEF(pxLexer)
 *  - 
 void
      pxLexer->PRINT(pxLexer)
 *  - 
 void
      pxLexer->ASSIGN(pxLexer)
 *  - 
 void
      pxLexer->PLUS(pxLexer)
 *  - 
 void
      pxLexer->MINUS(pxLexer)
 *  - 
 void
      pxLexer->TIMES(pxLexer)
 *  - 
 void
      pxLexer->DIV(pxLexer)
 *  - 
 void
      pxLexer->MOD(pxLexer)
 *  - 
 void
      pxLexer->BIT_AND(pxLexer)
 *  - 
 void
      pxLexer->BIT_OR(pxLexer)
 *  - 
 void
      pxLexer->BIT_XOR(pxLexer)
 *  - 
 void
      pxLexer->BIT_NOR(pxLexer)
 *  - 
 void
      pxLexer->L_SHIFT(pxLexer)
 *  - 
 void
      pxLexer->R_SHIFT(pxLexer)
 *  - 
 void
      pxLexer->DOUBLE_PLUS(pxLexer)
 *  - 
 void
      pxLexer->L_DOUBLE_PLUS(pxLexer)
 *  - 
 void
      pxLexer->R_DOUBLE_PLUS(pxLexer)
 *  - 
 void
      pxLexer->DOUBLE_MINUS(pxLexer)
 *  - 
 void
      pxLexer->L_DOUBLE_MINUS(pxLexer)
 *  - 
 void
      pxLexer->R_DOUBLE_MINUS(pxLexer)
 *  - 
 void
      pxLexer->AND(pxLexer)
 *  - 
 void
      pxLexer->OR(pxLexer)
 *  - 
 void
      pxLexer->GE(pxLexer)
 *  - 
 void
      pxLexer->NE(pxLexer)
 *  - 
 void
      pxLexer->LITTLE(pxLexer)
 *  - 
 void
      pxLexer->LE(pxLexer)
 *  - 
 void
      pxLexer->GT(pxLexer)
 *  - 
 void
      pxLexer->EQ(pxLexer)
 *  - 
 void
      pxLexer->DOT(pxLexer)
 *  - 
 void
      pxLexer->BLOCK(pxLexer)
 *  - 
 void
      pxLexer->IF(pxLexer)
 *  - 
 void
      pxLexer->ELSE(pxLexer)
 *  - 
 void
      pxLexer->BREAK(pxLexer)
 *  - 
 void
      pxLexer->CONTINUE(pxLexer)
 *  - 
 void
      pxLexer->SWITCH(pxLexer)
 *  - 
 void
      pxLexer->CASE(pxLexer)
 *  - 
 void
      pxLexer->DEFAULT(pxLexer)
 *  - 
 void
      pxLexer->FOR(pxLexer)
 *  - 
 void
      pxLexer->WHILE(pxLexer)
 *  - 
 void
      pxLexer->DO(pxLexer)
 *  - 
 void
      pxLexer->DOWHILE(pxLexer)
 *  - 
 void
      pxLexer->NOPE(pxLexer)
 *  - 
 void
      pxLexer->LIST(pxLexer)
 *  - 
 void
      pxLexer->LIST_CALL(pxLexer)
 *  - 
 void
      pxLexer->LIST_DEF(pxLexer)
 *  - 
 void
      pxLexer->FUNC(pxLexer)
 *  - 
 void
      pxLexer->FUNC_CALL(pxLexer)
 *  - 
 void
      pxLexer->RETURN(pxLexer)
 *  - 
 void
      pxLexer->PARAM(pxLexer)
 *  - 
 void
      pxLexer->INT(pxLexer)
 *  - 
 void
      pxLexer->ID(pxLexer)
 *  - 
 void
      pxLexer->FLOAT(pxLexer)
 *  - 
 void
      pxLexer->COMMENT(pxLexer)
 *  - 
 void
      pxLexer->WS(pxLexer)
 *  - 
 void
      pxLexer->STRING(pxLexer)
 *  - 
 void
      pxLexer->EXPONENT(pxLexer)
 *  - 
 void
      pxLexer->HEX_DIGIT(pxLexer)
 *  - 
 void
      pxLexer->ESC_SEQ(pxLexer)
 *  - 
 void
      pxLexer->OCTAL_ESC(pxLexer)
 *  - 
 void
      pxLexer->UNICODE_ESC(pxLexer)
 *  - 
 void
      pxLexer->Tokens(pxLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_xLexer_H
#define _xLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct xLexer_Ctx_struct xLexer, * pxLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
xLexer

 */
struct xLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mT__64)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mT__65)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mT__66)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mT__67)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mT__68)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mT__69)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mT__70)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mT__71)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mDEF)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mPRINT)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mASSIGN)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mPLUS)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mMINUS)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mTIMES)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mDIV)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mMOD)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mBIT_AND)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mBIT_OR)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mBIT_XOR)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mBIT_NOR)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mL_SHIFT)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mR_SHIFT)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mDOUBLE_PLUS)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mL_DOUBLE_PLUS)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mR_DOUBLE_PLUS)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mDOUBLE_MINUS)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mL_DOUBLE_MINUS)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mR_DOUBLE_MINUS)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mAND)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mOR)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mGE)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mNE)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mLITTLE)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mLE)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mGT)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mEQ)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mDOT)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mBLOCK)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mIF)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mELSE)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mBREAK)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mCONTINUE)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mSWITCH)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mCASE)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mDEFAULT)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mFOR)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mWHILE)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mDO)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mDOWHILE)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mNOPE)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mLIST)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mLIST_CALL)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mLIST_DEF)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mFUNC)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mFUNC_CALL)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mRETURN)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mPARAM)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mINT)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mID)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mFLOAT)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mCOMMENT)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mSTRING)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mEXPONENT)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mHEX_DIGIT)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mESC_SEQ)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mOCTAL_ESC)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mUNICODE_ESC)	(struct xLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct xLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct xLexer_Ctx_struct * ctx);
    void	    (*free)   (struct xLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pxLexer xLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pxLexer xLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__64      64
#define T__65      65
#define T__66      66
#define T__67      67
#define T__68      68
#define T__69      69
#define T__70      70
#define T__71      71
#define AND      4
#define ASSIGN      5
#define BIT_AND      6
#define BIT_NOR      7
#define BIT_OR      8
#define BIT_XOR      9
#define BLOCK      10
#define BREAK      11
#define CASE      12
#define COMMENT      13
#define CONTINUE      14
#define DEF      15
#define DEFAULT      16
#define DIV      17
#define DO      18
#define DOT      19
#define DOUBLE_MINUS      20
#define DOUBLE_PLUS      21
#define DOWHILE      22
#define ELSE      23
#define EQ      24
#define ESC_SEQ      25
#define EXPONENT      26
#define FLOAT      27
#define FOR      28
#define FUNC      29
#define FUNC_CALL      30
#define GE      31
#define GT      32
#define HEX_DIGIT      33
#define ID      34
#define IF      35
#define INT      36
#define LE      37
#define LIST      38
#define LIST_CALL      39
#define LIST_DEF      40
#define LITTLE      41
#define L_DOUBLE_MINUS      42
#define L_DOUBLE_PLUS      43
#define L_SHIFT      44
#define MINUS      45
#define MOD      46
#define NE      47
#define NOPE      48
#define OCTAL_ESC      49
#define OR      50
#define PARAM      51
#define PLUS      52
#define PRINT      53
#define RETURN      54
#define R_DOUBLE_MINUS      55
#define R_DOUBLE_PLUS      56
#define R_SHIFT      57
#define STRING      58
#define SWITCH      59
#define TIMES      60
#define UNICODE_ESC      61
#define WHILE      62
#define WS      63
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for xLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
